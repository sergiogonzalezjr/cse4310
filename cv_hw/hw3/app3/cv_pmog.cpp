/*
Sergio Gonzalez
CSE 4310 HW3

This program was built using the existing cv_pmog as a base, and some merging was done with cv_tracking.
*/

//
//    Copyright 2018 Christopher D. McMurrough
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

/*******************************************************************************************************************//**
 * @file cv_pmog.cpp
 * @brief C++ example of MOG2 background subtraction in video using OpenCV
 * @author Christopher D. McMurrough
 **********************************************************************************************************************/

// include necessary dependencies
#include <iostream>
#include <cstdio>
#include "opencv2/opencv.hpp"
#include <opencv2/tracking.hpp>
//#include <opencv2/core/oc1.hpp>

// configuration parameters
#define NUM_COMNMAND_LINE_ARGUMENTS 1

/*******************************************************************************************************************//**
 * @brief program entry point
 * @param[in] argc number of command line arguments
 * @param[in] argv string array of command line arguments
 * @return return code (0 for normal termination)
 * @author Christoper D. McMurrough
 **********************************************************************************************************************/
 bool rectangle_sorter(cv::RotatedRect const& e1, cv::RotatedRect const& e2)
 {
 	return e1.size.width < e2.size.width;
 }
 
 int white_count(cv::Mat snap)
 {
 	int white_count = 0;
 	
 	for(int x = 0; x < snap.cols; x++)
 	{
 		for(int y = 0; y < snap.rows; y++)
 		{
 			cv::Vec3b eyedrop_sample = snap.at<cv::Vec3b>(y,x);
 			
 			if(((int)eyedrop_sample[0] == 255) && ((int)eyedrop_sample[1] == 255) && ((int)eyedrop_sample[2] == 255))
 			{
 				white_count++;
 			}
 		}
 	}
 	
 	return white_count;
 }
 
 
int main(int argc, char **argv)
{
    // store video capture parameters
    std::string fileName;

    // validate and parse the command line arguments
    if(argc != NUM_COMNMAND_LINE_ARGUMENTS + 1)
    {
        std::printf("USAGE: %s <file_path> \n", argv[0]);
        return 0;
    }
    else
    {
        fileName = argv[1];
    }

    // open the video file
    cv::VideoCapture capture(fileName);
    if(!capture.isOpened())
    {
        std::printf("Unable to open video source, terminating program! \n");
        return 0;
    }

    // get the video source parameters
    int captureWidth = static_cast<int>(capture.get(cv::CAP_PROP_FRAME_WIDTH));
    int captureHeight = static_cast<int>(capture.get(cv::CAP_PROP_FRAME_HEIGHT));
    int captureFPS = static_cast<int>(capture.get(cv::CAP_PROP_FPS));
    std::cout << "Video source opened successfully (width=" << captureWidth << " height=" << captureHeight << " fps=" << captureFPS << ")!" << std::endl;

    // set background filtering parameters
    const int bgHistory = 500;
    const float bgThreshold = 50;
    const bool bgShadowDetection = true;
    cv::Mat fgMask; //fg mask generated by MOG2 method
    cv::Ptr<cv::BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
    pMOG2 = cv::createBackgroundSubtractorMOG2(bgHistory, bgThreshold, bgShadowDetection);
    
    std::vector<std::vector<cv::Ptr<cv::Tracker>>> trackers(4);
    std::vector<std::vector<cv::Rect>> track_roi(4);
    
    cv::Rect gate1(cv::Point(238,0), cv::Point(401,10));
    cv::Rect gate2(cv::Point(238,40), cv::Point(401,60));
    cv::Rect gate3(cv::Point(238,145), cv::Point(401,185));
    cv::Rect gate4(cv::Point(238,230), cv::Point(401,270));
    
    cv::Rect roi_1(cv::Point(0,145), cv::Point(163,205));
    cv::Rect roi_1_activation(cv::Point(143,145), cv::Point(163,205));
    
    cv::Rect roi_2(cv::Point(0,220), cv::Point(163,280));
    cv::Rect roi_2_activation(cv::Point(143,220), cv::Point(163,280));
    
    cv::Rect roi_3(cv::Point(476,0), cv::Point(639,20));
    cv::Rect roi_3_1_activation(cv::Point(476,10), cv::Point(516,20));
    cv::Rect roi_3_2_activation(cv::Point(556,0), cv::Point(596,5));
    
    cv::Rect roi_4(cv::Point(476,30), cv::Point(639,90));
    cv::Rect roi_4_activation(cv::Point(476,50), cv::Point(496,90));
    
    int gate_status[4];
    int track_status[4];
    for(int i = 0; i < 4; i++)
    {
    	gate_status[i] = 0;
    	track_status[i] = 0;
    }

    bool print = false;
    int westbound_count = 0;
    int eastbound_count = 0;
	
    // process data until program termination
    bool doCapture = true;
    while(doCapture)
    {
        // get the start time
        double startTicks = static_cast<double>(cv::getTickCount());

        // attempt to acquire and process an image frame
        cv::Mat captureFrame;
        cv::Mat grayFrame;
        cv::Mat fgClone;

        bool captureSuccess = capture.read(captureFrame);
        if(captureSuccess)
        {
			// pre-process the raw image frame
            const int rangeMin = 0;
            const int rangeMax = 255;
            cv::cvtColor(captureFrame, grayFrame, cv::COLOR_BGR2GRAY);
            cv::normalize(grayFrame, grayFrame, rangeMin, rangeMax, cv::NORM_MINMAX, CV_8UC1);

			// extract the foreground mask from image
			pMOG2->apply(grayFrame, fgMask);

	    //fgClone = cv::Mat::zeros(fgMask.size(), CV_8UC3);
	    fgClone = fgMask.clone();
	    cv::cvtColor(fgClone, fgClone, cv::COLOR_GRAY2BGR);
	    
	    cv::line(fgClone, cv::Point(0, 26), cv::Point(639, 26), cv::Scalar(0,0,0), 5, cv::LINE_8, 0);
	    cv::line(fgClone, cv::Point(0, 90), cv::Point(639, 90), cv::Scalar(0,0,0), 5, cv::LINE_8, 0);
	    cv::line(fgClone, cv::Point(0, 140), cv::Point(639, 140), cv::Scalar(0,0,0), 5, cv::LINE_8, 0);
	    cv::line(fgClone, cv::Point(0, 210), cv::Point(639, 210), cv::Scalar(0,0,0), 5, cv::LINE_8, 0);
	    
	    
	    int track_activation_count[4];
	    
	    track_activation_count[0] =  white_count(fgClone(roi_1_activation));
	    track_activation_count[1] =  white_count(fgClone(roi_2_activation));
	    track_activation_count[2] =  white_count(fgClone(roi_3_1_activation));
	    track_activation_count[3] =  white_count(fgClone(roi_4_activation));
	    
	    for(int i = 0; i < 4; i++)
	    {
	    		
	    	if(((track_activation_count[i] >= 100) && (track_status[i] == 0) && (i!=2)) || ((i == 2) && ((track_activation_count[2] >= 25) && (white_count(fgClone(roi_3_2_activation))>=25))&&(track_status[2]==0)))
	    	{		
	    		trackers[i].push_back(cv::TrackerCSRT::create());
	    		
	    		if(i == 0)
	    		{
	    			track_roi[i].push_back(cv::Rect(cv::Point(0, 145), cv::Point(155, 205)));
	    		}
	    		else if(i == 1)
	    		{
	    			track_roi[i].push_back(cv::Rect(cv::Point(0, 220), cv::Point(155, 280)));
	    		}
	    		else if(i == 2)
	    		{
	    			track_roi[i].push_back(cv::Rect(cv::Point(486, 0), cv::Point(619, 20)));
	    		}
	    		else
	    		{
	    			track_roi[i].push_back(cv::Rect(cv::Point(486, 30), cv::Point(619, 90)));
	    		}
	    		trackers[i][trackers[i].size()-1]->init(captureFrame, track_roi[i][track_roi[i].size()-1]);
	    		track_status[i] = 1;
	    		
	    	}
	    	else if(track_activation_count[i] <= 10)
	    	{
	    		track_status[i] = 0;
	    	}
	    }
	    
	    for(int i = 0; i < 4; i++)
	    {
	    	for(int j = 0; j < trackers[i].size(); j++)
	    	{	
	    		if(((i < 2) && (track_roi[i][j].x >= 540)) || ((i >= 2) && (track_roi[i][j].br().x <= 99)))
	    		{
	    			trackers[i].erase(trackers[i].begin());
	    			track_roi[i].erase(track_roi[i].begin());
	    		}
	    		else
	    		{
	    			trackers[i][j]->update(captureFrame, track_roi[i][j]);
	    			
	    			if(i < 2)
	    			{
	    				cv::rectangle(captureFrame, track_roi[i][j], cv::Scalar(0,0,255),4,cv::LINE_8, 0);
	    			}
	    			else
	    			{
	    				cv::rectangle(captureFrame, track_roi[i][j], cv::Scalar(0,255,0),4,cv::LINE_8, 0);
	    			}
	    		}
	    	}
	    }
	    
	    cv::rectangle(fgClone, roi_1, cv::Scalar(0,0,255), 1, cv::LINE_8, 0);
	    cv::rectangle(fgClone, roi_1_activation, cv::Scalar(0,255,255), 1, cv::LINE_8, 0);
	    
	    cv::rectangle(fgClone, roi_2, cv::Scalar(0,0,255), 1, cv::LINE_8, 0);
	    cv::rectangle(fgClone, roi_2_activation, cv::Scalar(0,255,255), 1, cv::LINE_8, 0);
	    
	    cv::rectangle(fgClone, roi_3, cv::Scalar(0,0,255), 1, cv::LINE_8, 0);
	    cv::rectangle(fgClone, roi_3_1_activation, cv::Scalar(0,255,255), 1, cv::LINE_8, 0);
	    cv::rectangle(fgClone, roi_3_2_activation, cv::Scalar(0,255,255), 1, cv::LINE_8, 0);
	    
	    cv::rectangle(fgClone, roi_4, cv::Scalar(0,0,255), 1, cv::LINE_8, 0);
	    cv::rectangle(fgClone, roi_4_activation, cv::Scalar(0,255,255), 1, cv::LINE_8, 0);
	    
	    //cv::line(captureFrame, cv::Point(99,0), cv::Point(99,479), cv::Scalar(0,0,255), 1, cv::LINE_8, 0);
	    //cv::line(captureFrame, cv::Point(540,0), cv::Point(540,479), cv::Scalar(0,0,255), 1, cv::LINE_8, 0);

	    // COUNTER LOGIC
	    int gate_activation_count[4];
	    
	    gate_activation_count[0] =  white_count(fgClone(gate1));
	    gate_activation_count[1] =  white_count(fgClone(gate2));
	    gate_activation_count[2] =  white_count(fgClone(gate3));
	    gate_activation_count[3] =  white_count(fgClone(gate4));
	    
	    for(int i = 0; i < 4; i++)
	    {
	    	if((gate_activation_count[i] >= 125) && (gate_status[i] == 0))
	    	{
	    		gate_status[i] = 1;
	    		
	    		if(i < 2)
	    		{
	    			westbound_count++;
	    		}
	    		else
	    		{
	    			eastbound_count++;
	    		}
	    		print = true;
	    	}
	    	else if(gate_activation_count[i] <= 10)
	    	{
	    		gate_status[i] = 0;
	    	}
	    }

	    	    
	    if(print == true)
	    {
	    	std::cout << "WESTBOUND COUNT: " << westbound_count << "\nEASTBOUND COUNT: " << eastbound_count << "\n\n" << std::endl;
	    	print = false;
	    }
	    
        }
        else
        {
            return 0;
        }

        // update the GUI window if necessary
        if(captureSuccess)
        {
            cv::imshow("captureFrame", captureFrame);
	    cv::imshow("fgClone", fgClone);

            // get the number of milliseconds per frame
            int delayMs = (1.0 / captureFPS) * 1000;

            // check for program termination
            if(((char) cv::waitKey(delayMs)) == 'q')
            {
                doCapture = false;
            }
            
        }
    }

    // release program resources before returning
    capture.release();
    cv::destroyAllWindows();
}
